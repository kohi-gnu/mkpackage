#!/bin/bash
set -euo pipefail

LC_ALL=C
LANG=C

# ============================================================================
#  functions
# ============================================================================
#  error(msg) - display error message and exit
# ----------------------------------------------------------------------------
error() {
	echo -e "\033[31m$1\033[0m"
	exit 1
}

# ----------------------------------------------------------------------------
#  finish() - remove temp dir before exit
# ----------------------------------------------------------------------------
finish() {
	ret=$?

	if [[ -v MKPKG_TMP_DIR ]]
	then
		echo "Cleanup: ${MKPKG_TMP_DIR}"
		rm -r "${MKPKG_TMP_DIR}"
	fi

	exit $ret
}

# ----------------------------------------------------------------------------
#  verify(sha256sum, file) - check if "sha256sum" match
# ----------------------------------------------------------------------------
verify() {
	sha256sum -c <(echo "$1" "$2") > /dev/null && echo -n "OK"
}

# ----------------------------------------------------------------------------
#  download_and_verify(url, dest, sha256sum) - download file from "url" and 
#  save it to "dest" then check if "sha256sum" is correct otherwhise exit
# ----------------------------------------------------------------------------
download_and_verify() {
	if [ ! -f "$2" ] || [ ! "$(verify $3 $2)" == "OK" ]
	then
		wget "$1" -O "$2"
		[ "$(verify $3 $2)" == "OK" ]  || error "sha256sum missmatch"
	fi
}

# ============================================================================
#  Global variables
# ============================================================================
MKPKG_TMP_DIR="$(mktemp -d -t mkpackage-XXXXXXXX)"
MKPKG_OUT_DIR="."
trap finish INT EXIT

export PREFIX="${MKPKG_TMP_DIR}"

# ============================================================================
#  Entry
# ============================================================================
if [ $# -eq 0 ]
then
	error "Usage: $0 <package source folder>"
fi

if [ $# -eq 2 ]
then
	MKPKG_OUT_DIR="$2"
fi

package_dir="${1%/}"
package_recipe="$(basename $package_dir).recipe"

source "${package_dir}/${package_recipe}"

echo "Building ${PKG_NAME} v${PKG_VERSION}"

archive_name="${PKG_NAME}-${PKG_VERSION}.tar.xz"

cp -r "${package_dir}"/* "${MKPKG_TMP_DIR}"

pushd "${MKPKG_TMP_DIR}"

# build is defined in recipe file
build

echo "NAME=$PKG_NAME" > META
echo "VERSION=$PKG_VERSION" >> META
echo "LICENSE=$PKG_LICENSE" >> META
echo "DESCRIPTION=$PKG_DESC" >> META

tar -cvzf "${archive_name}" ${PKG_FILES[@]} META

popd

mv "${MKPKG_TMP_DIR}/${archive_name}" "${MKPKG_OUT_DIR}/${archive_name}"

